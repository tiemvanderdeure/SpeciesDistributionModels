import{_ as s,c as e,a5 as n,o as i}from"./chunks/framework.BApwG13G.js";const u=JSON.parse('{"title":"Example of a full species distribution modelling workflow","description":"","frontmatter":{},"headers":[],"relativePath":"eucalyptus_regnans.md","filePath":"eucalyptus_regnans.md","lastUpdated":null}'),t={name:"eucalyptus_regnans.md"};function p(l,a,o,r,c,d){return i(),e("div",null,a[0]||(a[0]=[n(`<h1 id="Example-of-a-full-species-distribution-modelling-workflow" tabindex="-1">Example of a full species distribution modelling workflow <a class="header-anchor" href="#Example-of-a-full-species-distribution-modelling-workflow" aria-label="Permalink to &quot;Example of a full species distribution modelling workflow {#Example-of-a-full-species-distribution-modelling-workflow}&quot;">​</a></h1><p>This example fits and projects species distribution models for the tree species <em>Eucaplytus regnans</em> from scratch.</p><h2 id="Environmental-data" tabindex="-1">Environmental data <a class="header-anchor" href="#Environmental-data" aria-label="Permalink to &quot;Environmental data {#Environmental-data}&quot;">​</a></h2><p>We start by downloading environmental data. We use the <a href="./www.github.com/rafaqz/Rasters.jl">Rasters</a> package to handle raster data, and RasterDataSources.jl to automatically download Worldclim data.</p><p>In this example, we just download bioclimatic variables 1 and 12 (annual mean temperature and annual mean precipitation). We then mask to the country borders of Australia.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using Rasters, RasterDataSources, ArchGDAL, NaturalEarth, DataFrames</span></span>
<span class="line"><span>bio = RasterStack(WorldClim{BioClim}, (1,12))</span></span>
<span class="line"><span>countries = naturalearth(&quot;ne_10m_admin_0_countries&quot;) |&gt; DataFrame</span></span>
<span class="line"><span>australia = subset(countries, :NAME =&gt; ByRow(==(&quot;Australia&quot;))).geometry</span></span>
<span class="line"><span>bio_aus = Rasters.trim(mask(bio; with = australia)[X = 110 .. 156, Y = -45 .. -10])</span></span></code></pre></div><p>Let&#39;s plot this data to see what it looks like.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using CairoMakie</span></span>
<span class="line"><span>Rasters.rplot(bio_aus)</span></span></code></pre></div><h2 id="Occurrence-data" tabindex="-1">Occurrence data <a class="header-anchor" href="#Occurrence-data" aria-label="Permalink to &quot;Occurrence data {#Occurrence-data}&quot;">​</a></h2><p>Next, we use <a href="./www.github.com/rafaqz/GBIF2.jl">GBIF2.jl</a> to download occurrence records for this species. We use the <a href="/SpeciesDistributionModels.jl/previews/PR18/api#SpeciesDistributionModels.thin-Tuple{Any, Any}">thin</a> function in this package to weed out occurrences that are very close to each other, using a cut-off of 5km.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GBIF2, SpeciesDistributionModels</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> species_match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Eucalyptus regnans&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">occurrences_raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> occurrence_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sp; year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1970</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AU&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hasCoordinate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">occurrences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(occurrences_raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1255-element Vector{Tuple{Float64, Float64}}:</span></span>
<span class="line"><span> (145.98298, -38.33349)</span></span>
<span class="line"><span> (147.497946, -41.301006)</span></span>
<span class="line"><span> (147.255219, -41.237844)</span></span>
<span class="line"><span> (146.35, -37.36667)</span></span>
<span class="line"><span> (147.899871, -41.147461)</span></span>
<span class="line"><span> (146.782197, -41.376415)</span></span>
<span class="line"><span> (146.779808, -41.37551)</span></span>
<span class="line"><span> (146.3125, -38.56111)</span></span>
<span class="line"><span> (146.24194, -38.52083)</span></span>
<span class="line"><span> (146.32167, -38.50667)</span></span>
<span class="line"><span> ⋮</span></span>
<span class="line"><span> (145.791172, -41.193094)</span></span>
<span class="line"><span> (147.683384, -41.2547)</span></span>
<span class="line"><span> (143.50361, -38.71111)</span></span>
<span class="line"><span> (143.59472, -38.70083)</span></span>
<span class="line"><span> (147.985049, -41.145683)</span></span>
<span class="line"><span> (147.823221, -41.164518)</span></span>
<span class="line"><span> (147.985505, -41.145895)</span></span>
<span class="line"><span> (146.16306, -37.83139)</span></span>
<span class="line"><span> (147.996952, -41.097568)</span></span></code></pre></div><h2 id="Background-points" tabindex="-1">Background points <a class="header-anchor" href="#Background-points" aria-label="Permalink to &quot;Background points {#Background-points}&quot;">​</a></h2><p>Next, we sample random points to use as background points.</p><p>From Rasters 0.12.1 on, this will be easier with Rasters.sample!</p><p>Let&#39;s plot both the occurrence and background points to see where <em>Eucalyptus regnans</em> is found.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using StatsBase</span></span>
<span class="line"><span>bg_indices = sample(findall(boolmask(bio_aus)), 500)</span></span>
<span class="line"><span>bg_points = DimPoints(bio_aus)[bg_indices]</span></span>
<span class="line"><span>fig, ax, pl = plot(bio_aus.bio1)</span></span>
<span class="line"><span>scatter!(ax, occurrences; color = :red)</span></span>
<span class="line"><span>scatter!(ax, bg_points; color = :grey)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><h2 id="Handling-data" tabindex="-1">Handling data <a class="header-anchor" href="#Handling-data" aria-label="Permalink to &quot;Handling data {#Handling-data}&quot;">​</a></h2><p>SpeciesDistributionModels.jl has a <a href="/SpeciesDistributionModels.jl/previews/PR18/api#SpeciesDistributionModels.sdmdata-Tuple{Any, Any}">sdmdata</a> function to handle input data. It takes tabular presence and background data as inputs, such as what is returned by <code>Rasters.extract</code> and <code>Rasters.sample</code>.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using SpeciesDistributionModels</span></span>
<span class="line"><span>p_data = extract(bio_aus, occurrences; skipmissing = true)</span></span>
<span class="line"><span>bg_data = bio_aus[bg_indices]</span></span>
<span class="line"><span>data = sdmdata(p_data, bg_data; resampler = CV(nfolds = 3))</span></span></code></pre></div><h2 id="Fitting-an-ensemble" tabindex="-1">Fitting an ensemble <a class="header-anchor" href="#Fitting-an-ensemble" aria-label="Permalink to &quot;Fitting an ensemble {#Fitting-an-ensemble}&quot;">​</a></h2><p>Now that we have our <code>data</code> object with presence and background data, we can fit our ensemble. The <code>sdm</code> function fits a whole ensemble, taking two arguments: a data object and a <code>NamedTuple</code> with models the ensemble should have. This can be any MLJ-compatible model. In this case, we use Maxnet, boosted regression trees (from the EvoTrees.jl package), and a GLM.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using Maxnet: MaxnetBinaryClassifier</span></span>
<span class="line"><span>using EvoTrees: EvoTreeClassifier</span></span>
<span class="line"><span>using MLJGLMInterface: LinearBinaryClassifier</span></span>
<span class="line"><span>models = (</span></span>
<span class="line"><span>  maxnet = MaxnetBinaryClassifier(),</span></span>
<span class="line"><span>  brt = EvoTreeClassifier(),</span></span>
<span class="line"><span>  glm = LinearBinaryClassifier()</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ensemble = sdm(data, models)</span></span></code></pre></div><h2 id="Evaluating-an-ensemble" tabindex="-1">Evaluating an ensemble <a class="header-anchor" href="#Evaluating-an-ensemble" aria-label="Permalink to &quot;Evaluating an ensemble {#Evaluating-an-ensemble}&quot;">​</a></h2><p>We can evaluate the entire ensemble using any metric from <a href="https://github.com/JuliaAI/StatisticalMeasures.jl" target="_blank" rel="noreferrer">StatisticalMeasures.jl</a>.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import SpeciesDistributionModels as SDM</span></span>
<span class="line"><span>ev = SDM.evaluate(ensemble; measures = (; auc, accuracy))</span></span></code></pre></div><h2 id="predicting" tabindex="-1">Predicting <a class="header-anchor" href="#predicting" aria-label="Permalink to &quot;Predicting&quot;">​</a></h2><p>Next, we the climatic suitability of the species throughout Australia using <code>SpeciesDistributionModels.predict</code>. We can specify a <code>reducer</code> argument to get a single value, instead of a prediction for each member in the ensemble.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pred = SDM.predict(ensemble, bio_aus; reducer = mean)</span></span>
<span class="line"><span>plot(pred; colorrange = (0,1))</span></span></code></pre></div><h2 id="Understanding-the-model" tabindex="-1">Understanding the model <a class="header-anchor" href="#Understanding-the-model" aria-label="Permalink to &quot;Understanding the model {#Understanding-the-model}&quot;">​</a></h2><p><a href="./@ref">SDM.explain</a> offers tools to estimate the contribution and response curves for each variable. Currently, the only implemented method is Shapley values from the <a href="./www.gitlab.com/ExpandingMan/Shapley.jl">Shapley.jl</a> package.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>expl = SDM.explain(ensemble; method = ShapleyValues(8))</span></span>
<span class="line"><span>variable_importance(expl)</span></span></code></pre></div><p>We can also interactively plot the model explanation to get response curves.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interactive_response_curves(expl)</span></span></code></pre></div>`,34)]))}const g=s(t,[["render",p]]);export{u as __pageData,g as default};
